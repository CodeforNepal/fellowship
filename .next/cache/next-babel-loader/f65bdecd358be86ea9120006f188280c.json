{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getAllContents } from '../lib/api';\nimport { AboutProgram } from '../components/AboutProgram';\nimport { TextLeft } from '../components/TextLeft';\nimport { TextRight } from '../components/TextRight';\nimport { TextOnly } from '../components/TextOnly';\nimport { Layout } from '../components/Layout';\nimport markdownToHtml from '../lib/markdownToHtml';\nimport { formUrl } from '../config';\nimport Head from 'next/head';\nimport { APP_NAME } from '../lib/constants';\n\nconst Index = ({\n  allContents\n}) => {\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, APP_NAME)), __jsx(AboutProgram, {\n    data: allContents.AboutProgram || {}\n  }), __jsx(TextLeft, {\n    data: allContents.AboutTheScholarship || {}\n  }), __jsx(TextRight, {\n    data: allContents.LearningOutcomes || {}\n  }), __jsx(TextLeft, {\n    data: allContents.PersonalDevelopment || {}\n  }), __jsx(TextOnly, {\n    data: allContents.ApplicationDetails || {}\n  }), __jsx(\"section\", {\n    className: \"pb-20 relative block bg-primary\"\n  }, __jsx(\"div\", {\n    className: \"bottom-auto top-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden -mt-20\",\n    style: {\n      height: \"80px\",\n      transform: \"translateZ(0)\"\n    }\n  }, __jsx(\"svg\", {\n    className: \"absolute bottom-0 overflow-hidden\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"none\",\n    version: \"1.1\",\n    viewBox: \"0 0 2560 100\",\n    x: \"0\",\n    y: \"0\"\n  }, __jsx(\"polygon\", {\n    className: \"text-primary fill-current\",\n    points: \"2560 0 2560 100 0 100\"\n  }))), __jsx(\"div\", {\n    className: \"container mx-auto px-4 lg:pt-24 lg:pb-64\"\n  }, __jsx(\"div\", {\n    className: \"flex flex-wrap text-center justify-center\"\n  }, __jsx(\"div\", {\n    className: \"w-full lg:w-4/5 px-4\"\n  }, __jsx(\"h2\", {\n    className: \"text-4xl font-semibold text-white\"\n  }, \"Apply Now\"))))), __jsx(\"section\", {\n    className: \"relative block py-24 lg:pt-0 bg-primary\"\n  }, __jsx(\"div\", {\n    className: \"container mx-auto px-4\"\n  }, __jsx(\"div\", {\n    className: \"flex flex-wrap justify-center lg:-mt-64 -mt-48\"\n  }, __jsx(\"div\", {\n    className: \"w-full lg:w-4/5 px-4\"\n  }, __jsx(\"div\", {\n    className: \"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-gray-200\"\n  }, __jsx(\"iframe\", {\n    title: \"Application Form\",\n    src: formUrl,\n    height: \"700\",\n    frameBorder: 0,\n    marginHeight: 0,\n    marginWidth: 0\n  }, \"Loading\\u2026\")))))));\n};\n\nexport default Index;\nexport async function getStaticProps() {\n  const allContentsNoHtml = getAllContents(['title', 'image', 'content']);\n  const keys = Object.keys(allContentsNoHtml);\n  const allContentsWithHtml = await new Promise(async resolve => {\n    let newObjects = {};\n\n    for (let i = 0; i < keys.length; i++) {\n      const currentObject = allContentsNoHtml[keys[i]];\n      const html = await markdownToHtml(currentObject.content);\n      newObjects = _objectSpread(_objectSpread({}, newObjects), {}, {\n        [keys[i]]: _objectSpread(_objectSpread({}, currentObject), {}, {\n          content: html\n        })\n      });\n\n      if (Object.keys(newObjects).length === keys.length) {\n        resolve(newObjects);\n      }\n    }\n  });\n  return {\n    props: {\n      allContents: allContentsWithHtml\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}