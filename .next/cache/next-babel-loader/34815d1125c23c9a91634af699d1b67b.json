{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), '_contents');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllContents(fields = []) {\n  const slugs = getPostSlugs();\n  let posts = {};\n  slugs.forEach(slug => {\n    posts = _objectSpread(_objectSpread({}, posts), {}, {\n      [slug]: getPostBySlug(slug, fields)\n    });\n  });\n  return posts;\n}","map":{"version":3,"sources":["/home/ishan/projects/c4n/fellowship/lib/api.ts"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","replace","fullPath","fileContents","readFileSync","data","content","items","forEach","field","getAllContents","slugs","posts"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAGA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,WAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAAqCC,MAAgB,GAAG,EAAxD,EAA4D;AACjE,QAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAjB;AACA,QAAMC,QAAQ,GAAGZ,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAArB;AACA,QAAMG,YAAY,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBf,MAAM,CAACY,YAAD,CAAhC;AAMA,QAAMI,KAAY,GAAG,EAArB,CAViE,CAYjE;;AACAR,EAAAA,MAAM,CAACS,OAAP,CAAgBC,KAAD,IAAW;AACxB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeT,QAAf;AACD;;AACD,QAAIS,KAAK,KAAK,SAAd,EAAyB;AACvBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACD;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACfF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACD;AACF,GAXD;AAaA,SAAOF,KAAP;AACD;AAED,OAAO,SAASG,cAAT,CAAwBX,MAAgB,GAAG,EAA3C,EAA+C;AACpD,QAAMY,KAAK,GAAGhB,YAAY,EAA1B;AACA,MAAIiB,KAAiC,GAAG,EAAxC;AACAD,EAAAA,KAAK,CACFH,OADH,CACYV,IAAD,IAAU;AACjBc,IAAAA,KAAK,mCAAOA,KAAP;AAAa,OAACd,IAAD,GAAOD,aAAa,CAACC,IAAD,EAAOC,MAAP;AAAjC,MAAL;AACD,GAHH;AAIA,SAAOa,KAAP;AACD","sourcesContent":["import fs from 'fs'\nimport { join } from 'path'\nimport matter from 'gray-matter'\nimport ContentType from '../types/content'\n\nconst postsDirectory = join(process.cwd(), '_contents')\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n  const realSlug = slug.replace(/\\.md$/, '')\n  const fullPath = join(postsDirectory, `${realSlug}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n  const { data, content } = matter(fileContents)\n\n  type Items = {\n    [key: string]: string\n  }\n\n  const items: Items = {}\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug\n    }\n    if (field === 'content') {\n      items[field] = content\n    }\n\n    if (data[field]) {\n      items[field] = data[field]\n    }\n  })\n\n  return items\n}\n\nexport function getAllContents(fields: string[] = []) {\n  const slugs = getPostSlugs()\n  let posts:{[slug:string]:ContentType} = {}\n  slugs\n    .forEach((slug) => {\n      posts = {...posts,[slug]:getPostBySlug(slug, fields) as ContentType}\n    })\n  return posts\n}\n"]},"metadata":{},"sourceType":"module"}